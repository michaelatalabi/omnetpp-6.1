[General]
network          = Hybrid5GSatNetwork
description      = "Ground–air–space test bed with mixed 5 G and classic INET nodes"
sim-time-limit   = 120s
seed-set         = ${repetition}

############################################################
#  Recording
############################################################
**.scalar-recording  = true
**.vector-recording  = true


############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 750m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 20000m
**.mobility.initFromDisplayString = false

############################################################
#  IP addressing + routing
############################################################
*.configurator.addDefaultRoutes = true        # a default via the nearest router
*.configurator.addStaticRoutes  = false       # leave dynamic work to OSPF

# Turn OSPF on for the boxes that actually forward packets
*.router[*].hasOspfRouting    = true
*.aircraft[*].hasOspfRouting  = true
*.sat[*].hasOspfRouting       = true

############################################################
#  Mobility models
############################################################
*.ue[*].mobility.typename         = "LinearMobility"
*.ue[*].mobility.initialX         = uniform(0m,1000m)
*.ue[*].mobility.initialY         = uniform(250m,750m)
*.ue[*].mobility.speed            = uniform(3mps,15mps)

*.aircraft[*].mobility.typename   = "LinearMobility"
*.aircraft[*].mobility.initialZ   = 10000m          # 10 km altitude
*.aircraft[*].mobility.speed      = 250mps          # ≈ 900 km/h

*.sat[*].mobility.typename        = "StationaryMobility"   # GEO for simplicity

############################################################
#  5 G radio + core layout
############################################################
*.gnb[*].carrierAggregation.numComponentCarriers = 1
*.gnb[*].cellularNic.numCarriers                 = 1

*.gnb1.mobility.initialX   = 250m
*.gnb1.mobility.initialY   = 500m
*.gnb2.mobility.initialX   = 800m
*.gnb2.mobility.initialY   = 500m

*.core.upf.numSgiIfaces      = 2                 # one per campus router

# UEs associates to the best BS at the beginning of the simulation
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1
**.dynamicCellAssociation = true
**.enableHandover = true
############################################################
#  Application traffic
############################################################
# IoT chatter (all directions, random peers)
*.iot[*].numApps                       = 1
*.iot[*].app[0].typename               = "UdpBasicApp"
*.iot[*].app[0].messageLength          = 32B
*.iot[*].app[0].sendInterval           = uniform(0.5s,1.5s)
*.iot[*].app[0].destPort               = 5000
*.iot[*].app[0].chooseDestAddr         = "random"

# Classic ground users talking to IoT
*.host[*].numApps                      = 1
*.host[*].app[0].typename              = "UdpBasicApp"
*.host[*].app[0].messageLength         = 100B
*.host[*].app[0].sendInterval          = exponential(2s)
*.host[*].app[0].destAddresses         = "iot[0..99]"
*.host[*].app[*].localPort = 3088+ancestorIndex(0)
*.host[*].app[*].destPort = 3000 + ancestorIndex(1)
*.host[*].app[0].startTime             = uniform(1s,2s)
*.host[*].app[0].stopTime              = 120s

# 5 G UEs (same idea, but their packets traverse gNB + core first)
*.ue[*].numApps                        = 1
*.ue[*].app[*].localPort = 3000
*.ue[*].app[0].typename                = "UdpBasicApp"
*.ue[*].app[0].messageLength           = 100B
*.ue[*].app[0].sendInterval            = exponential(2s)
*.ue[*].app[0].destAddresses           = "iot[0..99] host[0..9]"
*.ue[*].app[*].destPort = 3000 + ancestorIndex(1)
*.ue[*].app[0].startTime               = uniform(1s,3s)

# Aircraft primarily act as relays – sink any UDP they get
*.aircraft[*].numApps                  = 1
*.aircraft[*].app[0].typename          = "UdpSink"
*.aircraft[*].app[0].localPort         = 6000

############################################################
#  Vector reduction examples (optional, keep files tidy)
############################################################
**.udp*.endToEndDelay.vector-recording      = true
**.udp*.packetLossRate.vector-recording     = true
**.udp*.throughput.vector-recording         = true
#  Recording
############################################################
# 1) Scalar / vector output goes to a dedicated folder

output-vector-file   = "result/vectors.vec"
output-scalar-file   = "result/scalars.sca"

# 2) Turn on normal OMNeT++ scalars & vectors
**.scalar-recording  = true
**.vector-recording  = true

# ---------------------------------------------------------
# 3) PCAP capture – one recorder per interface family
# ---------------------------------------------------------

## Backbone / SGi / PPP links on ground routers
*.router[*].numPcapRecorders = 1
*.router[*].pcapRecorder.typename     = "PcapRecorder"
*.router[*].pcapRecorder[*].pcapFile     = "result/backbone.pcap"


## 5 G air-interface at every gNB
*.gnb*.cellularNic.numPcapRecorders = 1
*.gnb*.cellularNic.pcapRecorder.typename      = "PcapRecorder"
*.gnb*.cellularNic.pcapRecorder[*].pcapFile      = "result/5g.pcap"


## Satellite GEO/LEO PPP links
*.sat[*].numPcapRecorders = 1
*.sat[*].pppg[*].pcapRecorder.typename        = "PcapRecorder"
*.sat[*].pcapRecorder[*].pcapFile        = "result/sat.pcap"


## Aircraft PPP links (air ↔ ground & air ↔ sat)
*.aircraft[*].numPcapRecorders = 1
*.aircraft[*].pppg[*].pcapRecorder.typename   = "PcapRecorder"
*.aircraft[*].pcapRecorder[*].pcapFile   = "result/air.pcap"



**.pcapRecorder[*].alwaysFlush = true
