//
// Generated file, do not edit! Created by opp_msgtool 6.1 from common/LteCommon.msg.
//

#ifndef __SIMU5G_LTECOMMON_M_H
#define __SIMU5G_LTECOMMON_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class X2InformationElement;

}  // namespace simu5g

// cplusplus {{
#include "common/LteCommon.h"
// }}


namespace simu5g {

/**
 * Class generated from <tt>common/LteCommon.msg:147</tt> by opp_msgtool.
 * <pre>
 * class X2InformationElement
 * {
 *     \@customize;
 * }
 * </pre>
 *
 * X2InformationElement_Base is only useful if it gets subclassed, and X2InformationElement is derived from it.
 * The minimum code to be written for X2InformationElement is the following:
 *
 * <pre>
 * class X2InformationElement : public X2InformationElement_Base
 * {
 *   private:
 *     void copy(const X2InformationElement& other) { ... }

 *   public:
 *     X2InformationElement() : X2InformationElement_Base() {}
 *     X2InformationElement(const X2InformationElement& other) : X2InformationElement_Base(other) {copy(other);}
 *     X2InformationElement& operator=(const X2InformationElement& other) {if (this==&other) return *this; X2InformationElement_Base::operator=(other); copy(other); return *this;}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from X2InformationElement_Base
 * };
 * </pre>
 */
class X2InformationElement_Base
{
  protected:

  private:
    void copy(const X2InformationElement_Base& other);

  protected:
    bool operator==(const X2InformationElement_Base&) = delete;
    // make constructors protected to avoid instantiation
    X2InformationElement_Base();
    X2InformationElement_Base(const X2InformationElement_Base& other);
    // make assignment operator protected to force the user override it
    X2InformationElement_Base& operator=(const X2InformationElement_Base& other);

  public:
    virtual ~X2InformationElement_Base();
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);
};


}  // namespace simu5g


namespace omnetpp {

inline any_ptr toAnyPtr(const simu5g::MacNodeId *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline simu5g::MacNodeId *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::MacNodeId>(); }
inline any_ptr toAnyPtr(const simu5g::Lambda *p) {return any_ptr(p);}
template<> inline simu5g::Lambda *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::Lambda>(); }
inline any_ptr toAnyPtr(const simu5g::RemoteTable *p) {return any_ptr(p);}
template<> inline simu5g::RemoteTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::RemoteTable>(); }
inline any_ptr toAnyPtr(const simu5g::LtePhyFrameTable *p) {return any_ptr(p);}
template<> inline simu5g::LtePhyFrameTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LtePhyFrameTable>(); }
inline any_ptr toAnyPtr(const simu5g::LteNodeTable *p) {return any_ptr(p);}
template<> inline simu5g::LteNodeTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteNodeTable>(); }
inline any_ptr toAnyPtr(const simu5g::BandLimit *p) {return any_ptr(p);}
template<> inline simu5g::BandLimit *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::BandLimit>(); }
inline any_ptr toAnyPtr(const simu5g::RemoteUnitPhyData *p) {return any_ptr(p);}
template<> inline simu5g::RemoteUnitPhyData *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::RemoteUnitPhyData>(); }
inline any_ptr toAnyPtr(const simu5g::EnbInfo *p) {return any_ptr(p);}
template<> inline simu5g::EnbInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::EnbInfo>(); }
inline any_ptr toAnyPtr(const simu5g::UeInfo *p) {return any_ptr(p);}
template<> inline simu5g::UeInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::UeInfo>(); }
inline any_ptr toAnyPtr(const simu5g::UeAllocationInfo *p) {return any_ptr(p);}
template<> inline simu5g::UeAllocationInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::UeAllocationInfo>(); }
inline any_ptr toAnyPtr(const simu5g::QCIParameters *p) {return any_ptr(p);}
template<> inline simu5g::QCIParameters *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::QCIParameters>(); }
inline any_ptr toAnyPtr(const simu5g::ApplicationTable *p) {return any_ptr(p);}
template<> inline simu5g::ApplicationTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::ApplicationTable>(); }
inline any_ptr toAnyPtr(const simu5g::SchedDisciplineTable *p) {return any_ptr(p);}
template<> inline simu5g::SchedDisciplineTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::SchedDisciplineTable>(); }
inline any_ptr toAnyPtr(const simu5g::TxTable *p) {return any_ptr(p);}
template<> inline simu5g::TxTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::TxTable>(); }
inline any_ptr toAnyPtr(const simu5g::TxDirectionTable *p) {return any_ptr(p);}
template<> inline simu5g::TxDirectionTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::TxDirectionTable>(); }
inline any_ptr toAnyPtr(const simu5g::FeedbackRequest *p) {return any_ptr(p);}
template<> inline simu5g::FeedbackRequest *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::FeedbackRequest>(); }
inline any_ptr toAnyPtr(const simu5g::FeedbackGeneratorTypeTable *p) {return any_ptr(p);}
template<> inline simu5g::FeedbackGeneratorTypeTable *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::FeedbackGeneratorTypeTable>(); }
inline any_ptr toAnyPtr(const simu5g::DeploymentScenarioMapping *p) {return any_ptr(p);}
template<> inline simu5g::DeploymentScenarioMapping *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::DeploymentScenarioMapping>(); }
inline any_ptr toAnyPtr(const simu5g::X2InformationElement_Base *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline simu5g::X2InformationElement_Base *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::X2InformationElement_Base>(); }
inline any_ptr toAnyPtr(const simu5g::LteMacBuffer *p) {return any_ptr(p);}
template<> inline simu5g::LteMacBuffer *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteMacBuffer>(); }
inline any_ptr toAnyPtr(const simu5g::LteMacQueue *p) {return any_ptr(p);}
template<> inline simu5g::LteMacQueue *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteMacQueue>(); }
inline any_ptr toAnyPtr(const simu5g::Binder *p) {return any_ptr(p);}
template<> inline simu5g::Binder *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::Binder>(); }
inline any_ptr toAnyPtr(const simu5g::LteCellInfo *p) {return any_ptr(p);}
template<> inline simu5g::LteCellInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteCellInfo>(); }
inline any_ptr toAnyPtr(const simu5g::LteMacEnb *p) {return any_ptr(p);}
template<> inline simu5g::LteMacEnb *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteMacEnb>(); }
inline any_ptr toAnyPtr(const simu5g::LteMacBase *p) {return any_ptr(p);}
template<> inline simu5g::LteMacBase *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteMacBase>(); }
inline any_ptr toAnyPtr(const simu5g::LtePhyBase *p) {return any_ptr(p);}
template<> inline simu5g::LtePhyBase *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LtePhyBase>(); }
inline any_ptr toAnyPtr(const simu5g::LteRealisticChannelModel *p) {return any_ptr(p);}
template<> inline simu5g::LteRealisticChannelModel *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::LteRealisticChannelModel>(); }
inline any_ptr toAnyPtr(const simu5g::ExtCell *p) {return any_ptr(p);}
template<> inline simu5g::ExtCell *fromAnyPtr(any_ptr ptr) { return ptr.get<simu5g::ExtCell>(); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_LTECOMMON_M_H

