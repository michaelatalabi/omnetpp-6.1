//
// Generated file, do not edit! Created by opp_msgtool 6.1 from x2/packet/LteX2Message.msg.
//

#ifndef __SIMU5G_LTEX2MESSAGE_M_H
#define __SIMU5G_LTEX2MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class LteX2Message;

}  // namespace simu5g

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "common/LteCommon_m.h" // import common.LteCommon


namespace simu5g {

/**
 * Class generated from <tt>x2/packet/LteX2Message.msg:24</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is the X2 message flowing through X2 interface.
 * // It contains a vector of Information Elements (see LteX2Message.h),
 * // the total length of the message and the type of the message
 * //
 * class LteX2Message extends inet::FieldsChunk
 * {
 *     \@customize(true);
 *     chunkLength = inet::B(11); // FIXME needs to be checked:
 *                                // realistic chunk length without X2 information elements?
 *                                // Must at least be 11 Bytes for serialization:
 *                                // Type (1 B), sourceId (4 B), destinationId (4 B), IE list size (2 B))
 *     MacNodeId sourceId;
 *     MacNodeId destinationId;
 * }
 * </pre>
 *
 * LteX2Message_Base is only useful if it gets subclassed, and LteX2Message is derived from it.
 * The minimum code to be written for LteX2Message is the following:
 *
 * <pre>
 * class LteX2Message : public LteX2Message_Base
 * {
 *   private:
 *     void copy(const LteX2Message& other) { ... }

 *   public:
 *     LteX2Message() : LteX2Message_Base() {}
 *     LteX2Message(const LteX2Message& other) : LteX2Message_Base(other) {copy(other);}
 *     LteX2Message& operator=(const LteX2Message& other) {if (this==&other) return *this; LteX2Message_Base::operator=(other); copy(other); return *this;}
 *     virtual LteX2Message *dup() const override {return new LteX2Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteX2Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteX2Message)
 * </pre>
 */
class LteX2Message_Base : public ::inet::FieldsChunk
{
  protected:
    MacNodeId sourceId;
    MacNodeId destinationId;

  private:
    void copy(const LteX2Message_Base& other);

  protected:
    bool operator==(const LteX2Message_Base&) = delete;
    // make constructors protected to avoid instantiation
    LteX2Message_Base();
    LteX2Message_Base(const LteX2Message_Base& other);
    // make assignment operator protected to force the user override it
    LteX2Message_Base& operator=(const LteX2Message_Base& other);

  public:
    virtual ~LteX2Message_Base();
    virtual LteX2Message_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteX2Message");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacNodeId& getSourceId() const;
    virtual MacNodeId& getSourceIdForUpdate() { handleChange();return const_cast<MacNodeId&>(const_cast<LteX2Message_Base*>(this)->getSourceId());}
    virtual void setSourceId(const MacNodeId& sourceId);

    virtual const MacNodeId& getDestinationId() const;
    virtual MacNodeId& getDestinationIdForUpdate() { handleChange();return const_cast<MacNodeId&>(const_cast<LteX2Message_Base*>(this)->getDestinationId());}
    virtual void setDestinationId(const MacNodeId& destinationId);
};


}  // namespace simu5g


namespace omnetpp {

template<> inline simu5g::LteX2Message_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::LteX2Message_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_LTEX2MESSAGE_M_H

