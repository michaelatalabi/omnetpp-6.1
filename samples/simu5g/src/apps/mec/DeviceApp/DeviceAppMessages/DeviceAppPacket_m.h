//
// Generated file, do not edit! Created by opp_msgtool 6.1 from apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg.
//

#ifndef __SIMU5G_DEVICEAPPPACKET_M_H
#define __SIMU5G_DEVICEAPPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class DeviceAppPacket;
class DeviceAppStartPacket;
class DeviceAppStopPacket;
class DeviceAppStartAckPacket;
class DeviceAppStopAckPacket;

}  // namespace simu5g

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "nodes/mec/MECPlatform/MECPackets_m.h" // import nodes.mec.MECPlatform.MECPackets


namespace simu5g {

/**
 * Class generated from <tt>apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg:24</tt> by opp_msgtool.
 * <pre>
 * class DeviceAppPacket extends MECPacket
 * {
 * }
 * </pre>
 */
class DeviceAppPacket : public ::simu5g::MECPacket
{
  protected:

  private:
    void copy(const DeviceAppPacket& other);

  protected:
    bool operator==(const DeviceAppPacket&) = delete;

  public:
    DeviceAppPacket();
    DeviceAppPacket(const DeviceAppPacket& other);
    virtual ~DeviceAppPacket();
    DeviceAppPacket& operator=(const DeviceAppPacket& other);
    virtual DeviceAppPacket *dup() const override {return new DeviceAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeviceAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeviceAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg:34</tt> by opp_msgtool.
 * <pre>
 * class DeviceAppStartPacket extends DeviceAppPacket
 * {
 *     string mecAppDId;
 *     string mecAppName;
 *     string mecAppProvider;
 *     string appPackageSource;
 *     // determines whether the instantiated app should be unique for every UE or shared among them
 *     bool shared = false;
 *     // if the MEC app is shared, determines which DevAppId should be used
 *     int associateDevAppId = -1;
 * }
 * </pre>
 */
class DeviceAppStartPacket : public ::simu5g::DeviceAppPacket
{
  protected:
    ::omnetpp::opp_string mecAppDId;
    ::omnetpp::opp_string mecAppName;
    ::omnetpp::opp_string mecAppProvider;
    ::omnetpp::opp_string appPackageSource;
    bool shared = false;
    int associateDevAppId = -1;

  private:
    void copy(const DeviceAppStartPacket& other);

  protected:
    bool operator==(const DeviceAppStartPacket&) = delete;

  public:
    DeviceAppStartPacket();
    DeviceAppStartPacket(const DeviceAppStartPacket& other);
    virtual ~DeviceAppStartPacket();
    DeviceAppStartPacket& operator=(const DeviceAppStartPacket& other);
    virtual DeviceAppStartPacket *dup() const override {return new DeviceAppStartPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getMecAppDId() const;
    virtual void setMecAppDId(const char * mecAppDId);

    virtual const char * getMecAppName() const;
    virtual void setMecAppName(const char * mecAppName);

    virtual const char * getMecAppProvider() const;
    virtual void setMecAppProvider(const char * mecAppProvider);

    virtual const char * getAppPackageSource() const;
    virtual void setAppPackageSource(const char * appPackageSource);

    virtual bool getShared() const;
    virtual void setShared(bool shared);

    virtual int getAssociateDevAppId() const;
    virtual void setAssociateDevAppId(int associateDevAppId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeviceAppStartPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeviceAppStartPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg:46</tt> by opp_msgtool.
 * <pre>
 * class DeviceAppStopPacket extends DeviceAppPacket
 * {
 *     string contextId;
 * }
 * </pre>
 */
class DeviceAppStopPacket : public ::simu5g::DeviceAppPacket
{
  protected:
    ::omnetpp::opp_string contextId;

  private:
    void copy(const DeviceAppStopPacket& other);

  protected:
    bool operator==(const DeviceAppStopPacket&) = delete;

  public:
    DeviceAppStopPacket();
    DeviceAppStopPacket(const DeviceAppStopPacket& other);
    virtual ~DeviceAppStopPacket();
    DeviceAppStopPacket& operator=(const DeviceAppStopPacket& other);
    virtual DeviceAppStopPacket *dup() const override {return new DeviceAppStopPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getContextId() const;
    virtual void setContextId(const char * contextId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeviceAppStopPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeviceAppStopPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg:51</tt> by opp_msgtool.
 * <pre>
 * class DeviceAppStartAckPacket extends DeviceAppPacket
 * {
 *     string contextId;
 *     bool result;
 *     string ipAddress;
 *     string reason;
 *     int port;
 * }
 * </pre>
 */
class DeviceAppStartAckPacket : public ::simu5g::DeviceAppPacket
{
  protected:
    ::omnetpp::opp_string contextId;
    bool result = false;
    ::omnetpp::opp_string ipAddress;
    ::omnetpp::opp_string reason;
    int port = 0;

  private:
    void copy(const DeviceAppStartAckPacket& other);

  protected:
    bool operator==(const DeviceAppStartAckPacket&) = delete;

  public:
    DeviceAppStartAckPacket();
    DeviceAppStartAckPacket(const DeviceAppStartAckPacket& other);
    virtual ~DeviceAppStartAckPacket();
    DeviceAppStartAckPacket& operator=(const DeviceAppStartAckPacket& other);
    virtual DeviceAppStartAckPacket *dup() const override {return new DeviceAppStartAckPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getContextId() const;
    virtual void setContextId(const char * contextId);

    virtual bool getResult() const;
    virtual void setResult(bool result);

    virtual const char * getIpAddress() const;
    virtual void setIpAddress(const char * ipAddress);

    virtual const char * getReason() const;
    virtual void setReason(const char * reason);

    virtual int getPort() const;
    virtual void setPort(int port);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeviceAppStartAckPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeviceAppStartAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/DeviceApp/DeviceAppMessages/DeviceAppPacket.msg:60</tt> by opp_msgtool.
 * <pre>
 * class DeviceAppStopAckPacket extends DeviceAppPacket
 * {
 *     bool result;
 *     string reason;
 * }
 * </pre>
 */
class DeviceAppStopAckPacket : public ::simu5g::DeviceAppPacket
{
  protected:
    bool result = false;
    ::omnetpp::opp_string reason;

  private:
    void copy(const DeviceAppStopAckPacket& other);

  protected:
    bool operator==(const DeviceAppStopAckPacket&) = delete;

  public:
    DeviceAppStopAckPacket();
    DeviceAppStopAckPacket(const DeviceAppStopAckPacket& other);
    virtual ~DeviceAppStopAckPacket();
    DeviceAppStopAckPacket& operator=(const DeviceAppStopAckPacket& other);
    virtual DeviceAppStopAckPacket *dup() const override {return new DeviceAppStopAckPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getResult() const;
    virtual void setResult(bool result);

    virtual const char * getReason() const;
    virtual void setReason(const char * reason);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeviceAppStopAckPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeviceAppStopAckPacket& obj) {obj.parsimUnpack(b);}


}  // namespace simu5g


namespace omnetpp {

template<> inline simu5g::DeviceAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::DeviceAppPacket*>(ptr.get<cObject>()); }
template<> inline simu5g::DeviceAppStartPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::DeviceAppStartPacket*>(ptr.get<cObject>()); }
template<> inline simu5g::DeviceAppStopPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::DeviceAppStopPacket*>(ptr.get<cObject>()); }
template<> inline simu5g::DeviceAppStartAckPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::DeviceAppStartAckPacket*>(ptr.get<cObject>()); }
template<> inline simu5g::DeviceAppStopAckPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::DeviceAppStopAckPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_DEVICEAPPPACKET_M_H

